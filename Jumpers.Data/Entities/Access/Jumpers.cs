//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("JumpersModel", "FK_Events_EventGroups", "EventGroups", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Jumpers.Data.Entities.Access.EventGroup), "Events", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Jumpers.Data.Entities.Access.Event), true)]
[assembly: EdmRelationshipAttribute("JumpersModel", "EventMembers", "Events", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Jumpers.Data.Entities.Access.Event), "Members", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Jumpers.Data.Entities.Access.Member))]
[assembly: EdmRelationshipAttribute("JumpersModel", "UserEvents", "Events", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Jumpers.Data.Entities.Access.Event), "Users", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Jumpers.Data.Entities.Access.User))]

#endregion

namespace Jumpers.Data.Entities.Access
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class JumpersEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new JumpersEntities object using the connection string found in the 'JumpersEntities' section of the application configuration file.
        /// </summary>
        public JumpersEntities() : base("name=JumpersEntities", "JumpersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new JumpersEntities object.
        /// </summary>
        public JumpersEntities(string connectionString) : base(connectionString, "JumpersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new JumpersEntities object.
        /// </summary>
        public JumpersEntities(EntityConnection connection) : base(connection, "JumpersEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventGroup> EventGroups
        {
            get
            {
                if ((_EventGroups == null))
                {
                    _EventGroups = base.CreateObjectSet<EventGroup>("EventGroups");
                }
                return _EventGroups;
            }
        }
        private ObjectSet<EventGroup> _EventGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Event> Events
        {
            get
            {
                if ((_Events == null))
                {
                    _Events = base.CreateObjectSet<Event>("Events");
                }
                return _Events;
            }
        }
        private ObjectSet<Event> _Events;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Member> Members
        {
            get
            {
                if ((_Members == null))
                {
                    _Members = base.CreateObjectSet<Member>("Members");
                }
                return _Members;
            }
        }
        private ObjectSet<Member> _Members;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventGroups(EventGroup eventGroup)
        {
            base.AddObject("EventGroups", eventGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Events EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEvents(Event @event)
        {
            base.AddObject("Events", @event);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Members EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMembers(Member member)
        {
            base.AddObject("Members", member);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<EventGroups_Insert_Result> EventGroups_Insert(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EventGroups_Insert_Result>("EventGroups_Insert", nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="eventGroupId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public int EventGroups_Update(Nullable<global::System.Int32> eventGroupId, global::System.String name)
        {
            ObjectParameter eventGroupIdParameter;
            if (eventGroupId.HasValue)
            {
                eventGroupIdParameter = new ObjectParameter("eventGroupId", eventGroupId);
            }
            else
            {
                eventGroupIdParameter = new ObjectParameter("eventGroupId", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("EventGroups_Update", eventGroupIdParameter, nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Events_GetByUserId(Nullable<global::System.Int32> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Events_GetByUserId", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="start">No Metadata Documentation available.</param>
        /// <param name="finish">No Metadata Documentation available.</param>
        public ObjectResult<Events_Insert_Result> Events_Insert(Nullable<global::System.DateTime> start, Nullable<global::System.DateTime> finish)
        {
            ObjectParameter startParameter;
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(global::System.DateTime));
            }
    
            ObjectParameter finishParameter;
            if (finish.HasValue)
            {
                finishParameter = new ObjectParameter("finish", finish);
            }
            else
            {
                finishParameter = new ObjectParameter("finish", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<Events_Insert_Result>("Events_Insert", startParameter, finishParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="eventId">No Metadata Documentation available.</param>
        /// <param name="eventGroupId">No Metadata Documentation available.</param>
        /// <param name="start">No Metadata Documentation available.</param>
        /// <param name="finish">No Metadata Documentation available.</param>
        public int Events_Update(Nullable<global::System.Int32> eventId, Nullable<global::System.Int32> eventGroupId, Nullable<global::System.DateTime> start, Nullable<global::System.DateTime> finish)
        {
            ObjectParameter eventIdParameter;
            if (eventId.HasValue)
            {
                eventIdParameter = new ObjectParameter("eventId", eventId);
            }
            else
            {
                eventIdParameter = new ObjectParameter("eventId", typeof(global::System.Int32));
            }
    
            ObjectParameter eventGroupIdParameter;
            if (eventGroupId.HasValue)
            {
                eventGroupIdParameter = new ObjectParameter("eventGroupId", eventGroupId);
            }
            else
            {
                eventGroupIdParameter = new ObjectParameter("eventGroupId", typeof(global::System.Int32));
            }
    
            ObjectParameter startParameter;
            if (start.HasValue)
            {
                startParameter = new ObjectParameter("start", start);
            }
            else
            {
                startParameter = new ObjectParameter("start", typeof(global::System.DateTime));
            }
    
            ObjectParameter finishParameter;
            if (finish.HasValue)
            {
                finishParameter = new ObjectParameter("finish", finish);
            }
            else
            {
                finishParameter = new ObjectParameter("finish", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("Events_Update", eventIdParameter, eventGroupIdParameter, startParameter, finishParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="eventId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Members_GetByEventId(Nullable<global::System.Int32> eventId)
        {
            ObjectParameter eventIdParameter;
            if (eventId.HasValue)
            {
                eventIdParameter = new ObjectParameter("eventId", eventId);
            }
            else
            {
                eventIdParameter = new ObjectParameter("eventId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Members_GetByEventId", eventIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<Members_Insert_Result> Members_Insert(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Members_Insert_Result>("Members_Insert", nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="memberId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public int Members_Update(Nullable<global::System.Int32> memberId, global::System.String name)
        {
            ObjectParameter memberIdParameter;
            if (memberId.HasValue)
            {
                memberIdParameter = new ObjectParameter("memberId", memberId);
            }
            else
            {
                memberIdParameter = new ObjectParameter("memberId", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Members_Update", memberIdParameter, nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public int Teams_GetByUserId(Nullable<global::System.Int32> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Teams_GetByUserId", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        public int Users_GetById(Nullable<global::System.Int32> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Users_GetById", idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Users_GetByUserId(Nullable<global::System.Int32> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Users_GetByUserId", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="email">No Metadata Documentation available.</param>
        public ObjectResult<Users_Insert_Result> Users_Insert(global::System.String email)
        {
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("email", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Users_Insert_Result>("Users_Insert", emailParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        public int Users_Update(Nullable<global::System.Int32> userId, global::System.String email)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Int32));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("email", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Users_Update", userIdParameter, emailParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JumpersModel", Name="Event")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Event : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Event object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="start">Initial value of the Start property.</param>
        /// <param name="finish">Initial value of the Finish property.</param>
        public static Event CreateEvent(global::System.Int32 eventId, global::System.DateTime start, global::System.DateTime finish)
        {
            Event @event = new Event();
            @event.EventId = eventId;
            @event.Start = start;
            @event.Finish = finish;
            return @event;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if (_EventId != value)
                {
                    OnEventIdChanging(value);
                    ReportPropertyChanging("EventId");
                    _EventId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EventGroupId
        {
            get
            {
                return _EventGroupId;
            }
            set
            {
                OnEventGroupIdChanging(value);
                ReportPropertyChanging("EventGroupId");
                _EventGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventGroupId");
                OnEventGroupIdChanged();
            }
        }
        private Nullable<global::System.Int32> _EventGroupId;
        partial void OnEventGroupIdChanging(Nullable<global::System.Int32> value);
        partial void OnEventGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Start
        {
            get
            {
                return _Start;
            }
            set
            {
                OnStartChanging(value);
                ReportPropertyChanging("Start");
                _Start = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Start");
                OnStartChanged();
            }
        }
        private global::System.DateTime _Start;
        partial void OnStartChanging(global::System.DateTime value);
        partial void OnStartChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Finish
        {
            get
            {
                return _Finish;
            }
            set
            {
                OnFinishChanging(value);
                ReportPropertyChanging("Finish");
                _Finish = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Finish");
                OnFinishChanged();
            }
        }
        private global::System.DateTime _Finish;
        partial void OnFinishChanging(global::System.DateTime value);
        partial void OnFinishChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "FK_Events_EventGroups", "EventGroups")]
        public EventGroup EventGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventGroup>("JumpersModel.FK_Events_EventGroups", "EventGroups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventGroup>("JumpersModel.FK_Events_EventGroups", "EventGroups").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EventGroup> EventGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventGroup>("JumpersModel.FK_Events_EventGroups", "EventGroups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EventGroup>("JumpersModel.FK_Events_EventGroups", "EventGroups", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "EventMembers", "Members")]
        public EntityCollection<Member> Members
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Member>("JumpersModel.EventMembers", "Members");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Member>("JumpersModel.EventMembers", "Members", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "UserEvents", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("JumpersModel.UserEvents", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("JumpersModel.UserEvents", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JumpersModel", Name="EventGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EventGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EventGroup object.
        /// </summary>
        /// <param name="eventGroupId">Initial value of the EventGroupId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static EventGroup CreateEventGroup(global::System.Int32 eventGroupId, global::System.String name)
        {
            EventGroup eventGroup = new EventGroup();
            eventGroup.EventGroupId = eventGroupId;
            eventGroup.Name = name;
            return eventGroup;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventGroupId
        {
            get
            {
                return _EventGroupId;
            }
            set
            {
                if (_EventGroupId != value)
                {
                    OnEventGroupIdChanging(value);
                    ReportPropertyChanging("EventGroupId");
                    _EventGroupId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventGroupId");
                    OnEventGroupIdChanged();
                }
            }
        }
        private global::System.Int32 _EventGroupId;
        partial void OnEventGroupIdChanging(global::System.Int32 value);
        partial void OnEventGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "FK_Events_EventGroups", "Events")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("JumpersModel.FK_Events_EventGroups", "Events");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("JumpersModel.FK_Events_EventGroups", "Events", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JumpersModel", Name="Member")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Member : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Member object.
        /// </summary>
        /// <param name="memberId">Initial value of the MemberId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Member CreateMember(global::System.Int32 memberId, global::System.String name)
        {
            Member member = new Member();
            member.MemberId = memberId;
            member.Name = name;
            return member;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemberId
        {
            get
            {
                return _MemberId;
            }
            set
            {
                if (_MemberId != value)
                {
                    OnMemberIdChanging(value);
                    ReportPropertyChanging("MemberId");
                    _MemberId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MemberId");
                    OnMemberIdChanged();
                }
            }
        }
        private global::System.Int32 _MemberId;
        partial void OnMemberIdChanging(global::System.Int32 value);
        partial void OnMemberIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "EventMembers", "Events")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("JumpersModel.EventMembers", "Events");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("JumpersModel.EventMembers", "Events", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JumpersModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        public static User CreateUser(global::System.Int32 userId)
        {
            User user = new User();
            user.UserId = userId;
            return user;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("JumpersModel", "UserEvents", "Events")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("JumpersModel.UserEvents", "Events");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("JumpersModel.UserEvents", "Events", value);
                }
            }
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="JumpersModel", Name="EventGroups_Insert_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class EventGroups_Insert_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EventGroups_Insert_Result object.
        /// </summary>
        /// <param name="eventGroupId">Initial value of the EventGroupId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static EventGroups_Insert_Result CreateEventGroups_Insert_Result(global::System.Int32 eventGroupId, global::System.String name)
        {
            EventGroups_Insert_Result eventGroups_Insert_Result = new EventGroups_Insert_Result();
            eventGroups_Insert_Result.EventGroupId = eventGroupId;
            eventGroups_Insert_Result.Name = name;
            return eventGroups_Insert_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventGroupId
        {
            get
            {
                return _EventGroupId;
            }
            set
            {
                OnEventGroupIdChanging(value);
                ReportPropertyChanging("EventGroupId");
                _EventGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventGroupId");
                OnEventGroupIdChanged();
            }
        }
        private global::System.Int32 _EventGroupId;
        partial void OnEventGroupIdChanging(global::System.Int32 value);
        partial void OnEventGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="JumpersModel", Name="Events_Insert_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Events_Insert_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Events_Insert_Result object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="start">Initial value of the Start property.</param>
        /// <param name="finish">Initial value of the Finish property.</param>
        public static Events_Insert_Result CreateEvents_Insert_Result(global::System.Int32 eventId, global::System.DateTime start, global::System.DateTime finish)
        {
            Events_Insert_Result events_Insert_Result = new Events_Insert_Result();
            events_Insert_Result.EventId = eventId;
            events_Insert_Result.Start = start;
            events_Insert_Result.Finish = finish;
            return events_Insert_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                OnEventIdChanging(value);
                ReportPropertyChanging("EventId");
                _EventId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventId");
                OnEventIdChanged();
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Start
        {
            get
            {
                return _Start;
            }
            set
            {
                OnStartChanging(value);
                ReportPropertyChanging("Start");
                _Start = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Start");
                OnStartChanged();
            }
        }
        private global::System.DateTime _Start;
        partial void OnStartChanging(global::System.DateTime value);
        partial void OnStartChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Finish
        {
            get
            {
                return _Finish;
            }
            set
            {
                OnFinishChanging(value);
                ReportPropertyChanging("Finish");
                _Finish = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Finish");
                OnFinishChanged();
            }
        }
        private global::System.DateTime _Finish;
        partial void OnFinishChanging(global::System.DateTime value);
        partial void OnFinishChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="JumpersModel", Name="Members_Insert_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Members_Insert_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Members_Insert_Result object.
        /// </summary>
        /// <param name="memberId">Initial value of the MemberId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Members_Insert_Result CreateMembers_Insert_Result(global::System.Int32 memberId, global::System.String name)
        {
            Members_Insert_Result members_Insert_Result = new Members_Insert_Result();
            members_Insert_Result.MemberId = memberId;
            members_Insert_Result.Name = name;
            return members_Insert_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemberId
        {
            get
            {
                return _MemberId;
            }
            set
            {
                OnMemberIdChanging(value);
                ReportPropertyChanging("MemberId");
                _MemberId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MemberId");
                OnMemberIdChanged();
            }
        }
        private global::System.Int32 _MemberId;
        partial void OnMemberIdChanging(global::System.Int32 value);
        partial void OnMemberIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="JumpersModel", Name="Users_Insert_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class Users_Insert_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Users_Insert_Result object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        public static Users_Insert_Result CreateUsers_Insert_Result(global::System.Int32 userId)
        {
            Users_Insert_Result users_Insert_Result = new Users_Insert_Result();
            users_Insert_Result.UserId = userId;
            return users_Insert_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();

        #endregion

    }

    #endregion

}
